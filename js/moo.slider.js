/** * Description: Slider Responsivo *  * authors: * - JCHR <car.chr@gmail.com> *  * requires: * - Core *  */var MooSlider= new Class({    Implements: [Options],    options: {        duration       : 500,        interval       : 3000,        selector       : 'div',        direction      : 'top',        contTransition : Fx.Transitions.Sine.easeInOut // Transicion de la altura del contenedor    },    initialize: function(container, options) {        this.setOptions(options);        // Contenedor del slider        this.container = $(container);        // Elementos        this.items = this.container.getElements(this.options.selector);        // Total de elementos        this.total = this.items.length;        // Verifica si existe el contenedor del slideshow        if (!this.container || this.total <= 1) {            return false;        }        // Current index        this.currIndex = 0;        // Ultimo elemento desplegado        this.last = null;        // Elemento que se esta desplegando        this.curr = null;        // Controla si se esta ejecutando la transicion        this.Running = false;        // Instancia        var me = this;        // Opciones del tween        var tweenOptions = {            duration   : this.options.duration,            transition : this.options.transition,            wait       : false,            unit       : '%',            onComplete : function(){                me.finish();            }        };        // Agrega el tween a todos los elementos        this.items.each(function(el){            el.setStyles({                'visibility': 'hidden',                'z-index'   : -1            })                .setStyle(me.options.direction, 0)                .set('tween', tweenOptions);        });        // Mostrar el primer elemento        this.last = this.items[this.currIndex];        this.last.setStyles({            'visibility': 'visible',            'z-index'   : 1        });        // Auto-play        this.timer = this.next.periodical(this.options.interval, this);    },    next: function(){        // Verifica si esta corriendo el efecto        if (this.Running){            return false;        }        this.currIndex++;        // Verifica si existe el indice        if (this.currIndex == this.total){            this.currIndex = 0; // Regresar al primer elemento        }        this.walk();    },    walk: function(){        // Verifica si esta corriendo el efecto        if (this.Running){            return false;        }        this.Running = true;        // Efecto del ultimo elemento        if (this.last){            this.last.tween(this.options.direction, -100);        }        // Efecto del elemento a mostrar        this.curr = this.items[this.currIndex];        this.curr.setStyles({            'visibility': 'visible',            'z-index'   : 1        })            .setStyle(this.options.direction, 100)            .tween(this.options.direction, 0);    },    finish: function(){        if (!this.Running){            return false;        }        // Ocultar el ultimo elemento        this.last.setStyles({            'visibility': 'hidden',            'z-index'   : -1        });        this.last = this.curr;        this.Running = false;    }});